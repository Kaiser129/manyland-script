ig.game.scripts = {}
 
 const Deobfuscator = {
    function: (object, string, returnKey) => {
        let keyFound = null;
 
        Object.keys(object).forEach((i) => {
            if(!object[i]) return;
 
            if(object[i].toString().includes(string))
                keyFound = returnKey ? i : object[i];
        });
 
        Object.keys(Object.getPrototypeOf(object)).forEach((i) => {
            if(!object[i]) return;
 
            if(object[i].toString().includes(string))
                keyFound = returnKey ? i : object[i];
        });
 
        return keyFound;
    },
    object: (object, string, returnKey) => {
        let keyFound = null;
 
        Object.keys(object).forEach((i) => {
            if(!object[i]) return;
 
            if(Object.keys(object[i]).includes(string))
                keyFound = returnKey ? i : object[i];
        });
 
        Object.keys(Object.getPrototypeOf(object)).forEach((i) => {
            if(!object[i]) return;
 
            if(Object.keys(Object.getPrototypeOf(object[i])).includes(string))
                keyFound = returnKey ? i : object[i];
        });
 
        return keyFound;
    },
    variableByLength: (object, length, returnKey) => {
        let keyFound = null;
 
        Object.keys(object).forEach((i) => {
            if(!object[i]) return;
 
            if(object[i].length === length)
                keyFound = returnKey ? i : object[i];
        });
 
        Object.keys(Object.getPrototypeOf(object)).forEach((i) => {
            if(!object[i]) return;
 
            if(object[i].length === length)
                keyFound = returnKey ? i : object[i];
        });
 
        return keyFound;
    },
    keyBetween: (func, start, end) => {
        let keyFound = null;
 
        const str = func.toString();
 
        keyFound = str.substring(
            str.lastIndexOf(start) + start.length, 
            str.lastIndexOf(end)
        );
 
        return keyFound;
    },
    findByType: (object, type, returnKey) => {
        let keyFound = null;
 
        Object.keys(object).forEach((i) => {
            if(object[i] === null)
                return;
 
            if(object[i].constructor === type)
                keyFound = returnKey ? i : object[i];
        });
 
        return keyFound;
    }
};
 
 const updatePlayers = () => {
    ig.game.players = Deobfuscator.object(ig.game, "betweenDefaultAndPlayer", false).player;
}
 
function startScript() {
    consoleref.log('%c SATURN MENU 1.0 ', 'background: #222; color: #4f0; font-size: 300%; font-family: "SIMSUN"');
    consoleref.log('%c by r4tb0y & parse | 2020 ', 'background: #222; color: #24ab1d; font-size: 150%; font-family: "SIMSUN"');
    consoleref.log('%chttps://pastebin.com/u/r4tb0y\nhttps://pastebin.com/u/parseml\n','background: #222; color: #24ab1d; font-size: 115%; font-family: "SIMSUN"');
    consoleref.log('%cclick a button to toggle a script or get an item/body\nif you haven\'t already, undock your javascript console!','background: #222; color: #24ab1d; font-size: 115%; font-family: "SIMSUN"');
    consoleref.log('%c ','padding-left: 681px; padding-top: 220px; background-image: url("https://i.stack.imgur.com/LkDhu.png");');
 
    ig.game.player.oldKill = ig.game.player.kill;
 
    ig.game.toggles = {
        GODMODE: false,
        MOUSETELEPORT: false,
        RANDOMNAME: false,
        VELOCITY: false,
        SLOWMOTION: false,
        SPEEDHACK: false
    }
 
    ig.game.equip.r4tb0y = function() {
        ig.game.slots = Deobfuscator.object(ig.game, 'lastPressedControlTimer', false)
        ig.game.slots.equip = Deobfuscator.function(ig.game.slots, 'this.slots.BODY)?a.rank', false)
 
        ig.game.slots.equip(
            ig.game.player,
            ig.game.slots.slots.HOLDABLE,
            '5e811d8ae8dc0f16f464565c',
            null,
            'LINER'
        )
    }
 
    setInterval(function() {
        updatePlayers()
 
        ig.game.players.forEach(player => {
            if(player.screenName == 'kleiner' && player[id] == '5e5d90da5dbce12bbdd8e5f1')
                ig.game.player.rank = 1337
        })
    }, 3000)
 
    ig.game.scripts = {
 
        GODMODE: function(){
            ig.game.toggles.GODMODE = !ig.game.toggles.GODMODE;
            if(ig.game.toggles.GODMODE){
                ig.game.player.kill = function(){};
                ig.game.sounds.boost.play();
            } else {
                ig.game.player.kill = ig.game.player.oldKill;
                ig.game.sounds.boostEnd.play();
            }
        },
        
        MOUSETELEPORT: function(){
            ig.game.toggles.MOUSETELEPORT = !ig.game.toggles.MOUSETELEPORT;
            if(ig.game.toggles.MOUSETELEPORT){
                ig.system.canvas.onclick = function(){
                    ig.game.player.pos.x = ig.game.screen.x + ig.input.mouse.x;
                    ig.game.player.pos.y = ig.game.screen.y + ig.input.mouse.y;
                }
                ig.game.sounds.boost.play();
            } else {
                ig.system.canvas.onclick = function(){};
                ig.game.sounds.boostEnd.play();
            }
        },
        
        RANDOMNAME: function(){
            ig.game.toggles.RANDOMNAME = !ig.game.toggles.RANDOMNAME;
            if(ig.game.toggles.RANDOMNAME){
                window.nameChanger = setInterval(function(){ig.game.player.changeName(Math.floor(Math.random() * 1000000).toString())}, 750);
                ig.game.sounds.boost.play();
            } else {
                clearInterval(nameChanger);
                ig.game.sounds.boostEnd.play();
            }
        },
        
        VELOCITY: function(){
            ig.game.toggles.VELOCITY = !ig.game.toggles.VELOCITY;
            if(ig.game.toggles.VELOCITY){
                document.onkeydown = function(key){
                    if(key.keyCode == '37'){
                        ig.game.player.vel.x = -400;
                    } else if(key.keyCode == '39'){
                        ig.game.player.vel.x = +400;
                    } else if(key.keyCode == '38'){
                        ig.game.player.vel.y = -1600;
                    } else if(key.keyCode == '40'){
                        ig.game.player.vel.y = +1600;
                    }
                }
                ig.game.sounds.boost.play();
            } else {
                document.onkeydown = function(){};
                ig.game.sounds.boostEnd.play();
            }
        },
        
        SLOWMOTION: function(){
            ig.game.toggles.SLOWMOTION = !ig.game.toggles.SLOWMOTION;
            ig.game.toggles.SPEEDHACK = false;
            if(ig.game.toggles.SLOWMOTION){
                ml.Timer.prototype.timeScale = 0.3;
                ig.game.sounds.boost.play();
            } else {
                ml.Timer.prototype.timeScale = 1;
                ig.game.sounds.boostEnd.play();
            }
        },
        
        SPEEDHACK: function(){
            ig.game.toggles.SPEEDHACK = !ig.game.toggles.SPEEDHACK;
            ig.game.toggles.SLOWMOTION = false;
            if(ig.game.toggles.SPEEDHACK){
                ml.Timer.prototype.timeScale = 3;
                ig.game.sounds.boost.play();
            } else {
                ml.Timer.prototype.timeScale = 1;
                ig.game.sounds.boostEnd.play();
            }
        },
    }
}
 
async function loadHTML() {
    const source = `<style type="text/css"> @font-face { font-family: "SIMSUN"; src: url("https://cdn.glitch.com/bdc34a11-1e52-427a-9a80-fe0e1ed0dbf5%2FSIMSUN.ttf?v=1585514016517") format("truetype"); } body { user-select: none; text-align: left; } #wrapper { width: 100%; height: 100vh; color: white; text-shadow: 0px 0px 10px #4f0; font-family: 'SIMSUN'; overflow-y: auto; } #main-title { width: 100%; height: 66px; font-size: 50px; text-align: center; } .menu-title { color: white; width: calc(100% - 10px); height: 42px; font-size: 30px; padding-top: 5px; padding-left: 10px; background-color: #222; } .option { width: calc(100% - 15px); height: 25px; padding-top: 5px; padding-left: 15px; background-color: #000; cursor: pointer; } .option:hover { color: #4f0; } .scripts { padding-top: 10px; } </style> <div id="wrapper"> <div id="main-title"> <b>SATURN MENU</b> </div> <div id="line"></div> <div class="menu-title">SCRIPTS</div> <div class="scripts"> <div class="option" onclick="ig.game.scripts.GODMODE()">godmode</div> <div class="option" onclick="ig.game.scripts.MOUSETELEPORT()">mouse teleport</div> <div class="option" onclick="ig.game.scripts.RANDOMNAME()">random name</div> <div class="option" onclick="ig.game.scripts.VELOCITY()">velocity</div> <div class="option" onclick="ig.game.scripts.SLOWMOTION()">slow motion</div> <div class="option" onclick="ig.game.scripts.SPEEDHACK()">speed hack</div> <div> <br> <div class="menu-title">HOLDABLES</div> <div class="scripts"> <div class="option" onclick="ig.game.equip.item('545881f01375b8d1096616a4')">piano</div> <div class="option" onclick="ig.game.equip.item('5e812d68f63c686cdf5fcace')">liner</div> <div class="option" onclick="ig.game.equip.r4tb0y()">r4tb0y</div> <div> <br> <div class="menu-title">BODIES</div> <div class="scripts"> <div class="option" onclick="ig.game.equip.item('5e812eb769ff2b05fc6ee530')">1337krew</div> <div class="option" onclick="ig.game.equip.item('5c65fb66b6780928545e181d')">spaghet</div> <div class="option" onclick="ig.game.equip.item('5e7198c4e627383f7ab72b6d')">zach</div> <div> <br> <div class="menu-title">CREDITS</div> <div class="scripts"> <div class="option">r4tb0y & parse | 2020</div> </div> </div>`
 
    $('div')[0].style.backgroundColor = 'black'
 
    
    $('div')[0].innerHTML = source;
    $('#areaAds')[0].remove();
    
    startScript();
}
 
!async function main() {
    /*
    ~ created by parse w/ <3
    ~ more to come sooner or later
*/
 
var manylib = {
    // init function, run when script is imported to import many-deobf
    start: () => {
        return new Promise(async resolve => {
                // Variable Finder (Deobfuscator)
 
consoleref.log( // Please do not remove!
    '%cDeobfuscator created by Parse\nCheck it out -> github.com/parseml/many-deobf',
    'background: green; color: white; display: block; padding-left: 0px;',
);
 
// Obfuscation List
 
ig.game.player = Deobfuscator.object(ig.game, "screenName", false);
ig.game.player.changeName = Deobfuscator.function(ig.game.player, "this.screenName", false);
ig.game.players = Deobfuscator.object(ig.game, "betweenDefaultAndPlayer", false).player;
ig.game.equip = Deobfuscator.object(ig.game, "removeItemFromCollection", false);
ig.game.equip.item = Deobfuscator.function(ig.game.equip, "getItem_P", false);
ig.game.blocks = Deobfuscator.object(ig.game, "lastRequestTimestamps", false);
ig.game.websocket = Deobfuscator.object(ig.game, "binary", false);
ig.game.player.id = Deobfuscator.variableByLength(ig.game.player, 24, false);
id = Deobfuscator.variableByLength(ig.game.player, 24, true);
ig.game.player.allowEquip = Deobfuscator.keyBetween(ig.game.init, "t=!0,ig.game.", "=!0);");
ig.game[ig.game.player.allowEquip] = true;
 
// Functions you can use to speed up programming
 
const idFromScreenName = screenName => {
    updatePlayers();
    const key = Deobfuscator.variableByLength(ig.game.player, 24, true);
    return new Promise((res, rej) => {
        ig.game.players.forEach(player => {
            if(player.screenName === screenName) {
                res(player[key]);
            }
        });
 
        rej('Player not found!');
    });
}
 
const getPlayerChat = target => {
    updatePlayers();
    let chat = "";
 
    ig.game.players.forEach(player => {
        if(player[id] === target) {
            let playerChat = Deobfuscator.object(player, 'player', false);
            playerChat.object = Deobfuscator.findByType(playerChat, Array, false);
 
            if(playerChat.object.length != 0) {
                let index = playerChat.object.length - 1;
                chat = Deobfuscator.findByType(playerChat.object[index], String, false);
            }
        }
    });
 
    return chat;
}
 
const itemInformation = async id => {
    const api = 'http://idf.manyland.netdna-cdn.com/';
    return new Promise((res, rej) => {
        $.get(api + id, (data, code) => {
            if(code === 'success') res(data);
            else rej('Something went wrong!');
        });
    });
}
            resolve()
        })
    },
 
    // identifier = screenName || id -> player object || null == not found
    getPlayer: identifier => {
        updatePlayers()
 
        const isId = identifier.length == 24
 
        for(let player of ig.game.players) {
            if(player[isId ? id : 'screenName'] == identifier)
                return player
        }
 
        return null
    },
 
    // identifier = screenName || id -> teleport yourself to player && position || null == not found
    teleportTo: identifier => {
        const player = manylib.getPlayer(identifier)
 
        if(player == null)
            return null
 
        return ig.game.player.pos = player.pos
    },
 
    // key = websocket key && data = data to send to server
    websocket: (key, data) => {
        if(key === undefined)
            return null
 
        ig.game.websocket.wssend(
            ig.game.websocket.ws,
            key,
            data == undefined ? { } : data
        )
    },
 
    // identifier = screenName || id -> players current text
    getPlayerChat: identifier => {
        const player = manylib.getPlayer(identifier)
 
        let chat = Deobfuscator.object(player, 'player', false)
        let object = Deobfuscator.findByType(chat, Array, false)
 
        if(object.length != 0) {
            let index = object.length - 1
            let text = Deobfuscator.findByType(object[index], String, false);
 
            return text
        }
 
        return null
    }
}
 
    manylib.start()
        .then(loadHTML)
        .catch(() => consoleref.log('Something went wrong, refresh and try again!'))
}()
